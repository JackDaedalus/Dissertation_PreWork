The following code throws an error when the Anchor XAI condition created beging with a numerical value (for example: ['91.00 < CustomerNotPresentAuthAmount.acc.day.total <= 938.00']).
Amend the Python code so that the the first numberical value is successfully assigned as the numerical value for the feature. 

def parse_anchor_exps(new_df_anchor_results):
    
    # Step 1: Convert the 'Anchor Explanation' column from a string representation of a list back to an actual list
    new_df_anchor_results['Anchor Explanation'] = new_df_anchor_results['Anchor Explanation'].apply(ast.literal_eval)

    # Step 2: Determine the maximum number of conditions in the ANCHOR explanations across all instances
    max_num_conditions = max(new_df_anchor_results['Anchor Explanation'].apply(len))

    # Step 3: Initialize a list to store the numerical representations of the ANCHOR explanations
    numerical_explanations = []
    
    # Debug step
    print(f'The value for max_num_conditions is : {max_num_conditions}')

    # Step 4: Loop through each ANCHOR explanation and convert it to a numerical representation
    for explanation in new_df_anchor_results['Anchor Explanation']:
        
        numerical_representation = [-1] * len(df_feature_instances.columns) * max_num_conditions
        
        for idx, condition in enumerate(explanation):
            # Parse the condition to extract the feature name and value
            feature, relation, value = condition.split(' ')[0], condition.split(' ')[1], condition.split(' ')[2]

            # Find the index of the feature in the feature dataframe
            print(f'Explanation : {explanation} for Feature {feature}')
            feature_idx = df_feature_instances.columns.get_loc(feature)

            # Print debug
            print(f'Feature Index {feature_idx * max_num_conditions + idx}')
            print(f'The float(value) is : {float(value)}')
            
            # Store the feature index in the numerical representation
            numerical_representation[feature_idx * max_num_conditions + idx] = float(value)
            
        numerical_explanations.append(numerical_representation)

    # Step 5: Create a dataframe from the numerical representations
    df_anchors_numerical = pd.DataFrame(numerical_explanations)

    # Display the resulting dataframe
    #print(df_anchors_numerical)
    
    return df_anchors_numerical