Using this dataset generate the Python code to build an ML model for a binary classification 
problem to predict values of the 'default' target variables.  

Perform some basic feature engineering and perform one-hot encoding of categorical variables. 

Name the encoded dataframe as 'df_encoded'.

Scale the data, using either a Pipeline with a StandardScaler in a preprocessing stage or a similar 
Python code process.

Downsample the majority class to the same number of instances as the minority class. 

Suffix the training and test datasets with '_downsampled'.

Even though TensorFlow/Keras is not available in this environment, create the Python Notebook
code to generate a detection model based on an Artificial Neural Network using TensorFlow/Keras.

Use the most up to date version of TensorFlow/Keras that is available

Name the final model as 'model'.

Now that the model has been created generate SHAP values as an explainer for the data by scoring 
each feature.

Use a Deep Learning SHAP approach to generate the SHAP values.

Ensure that any SHAP output explicitly names the features by their column names.






Now that the model has been created generate XAI ANCHOR values/weigths 
generated as an explainer for the data.

Display ANCHOR values/weigths for the first five feature rows.

Ensure every line of Python code is clearly commented with a description of what 
operations are taking place, and why.

Print the output of key results in an easy-to-read format.



Now that the model has been created generate LIME explanation values for the data.

Display LIME values for first feature row.

Ensure every line of Python code is clearly commented with a description of what 
operations are taking place, and why.

Print the output of key results in an easy-to-read format.



Apply the DiCE (Diverse Counterfactual 
Explanations) framework to generate Counterfactual explanations for the model behaviour.



Visualize the first 5 counterfactual explanations.



